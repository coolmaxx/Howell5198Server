using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Howell5198;
using Howell5198.Protocols;
using System.Threading;
using System.IO;
using Howell.IO.Serialization;
using Howell.eCamera.Middlewares;
using Howell.Net.DataService.Authentication;
using Howell.Net.DataService.Management;
using Howell.Cryptography;
using Howell.Net.DataService.Video;
using Howell.Industry;
using Howell.Net.DeviceService.Network;
using Howell.Net.DeviceService;
using Howell.Net.DeviceService.DecodingUnits;
using Howell.Net.DeviceService.PanoCameras;

namespace HW5198Service
{
    public class Howell5198ServerAppInstance : IHowell5198ServerAppInstance, IDisposable
    {
        private Howell5198Server m_Server = null;
       // public const int CLIENT_MAX_COUNT = 100;
        //private MTClient Client = null;
        private Dictionary<String, double> targetfilelen = new Dictionary<String, double>();//指定beg时间的录像文件的长度
        private Dictionary<Int32, MTSession> m_mtsessions = new Dictionary<Int32, MTSession>();//所有的预览流
        private Dictionary<MTClient, StreamSession> m_filesessions = new Dictionary<MTClient, StreamSession>();//所有的回放流
        private Dictionary<Int32, HW_MediaInfo> m_HWheaders = new Dictionary<Int32, HW_MediaInfo>();//所有通道的HW头
        private Dictionary<String, Howell5198Session> m_AlarmSessions = new Dictionary<String, Howell5198Session>();//所有的注册报警的session
        //private int totalStream = 0;//来自客户端的流连接总数
        //private readonly Object totalStreamLocker = new Object();
        private readonly Object mtsessions_lock = new Object();
        private readonly Object HWheaders_lock = new Object();
        private DeviceSystemClient SystemClient = new DeviceSystemClient(String.Format("{0}/System",ServiceConfiguration.Instance.DeviceServiceAddress));
        private DeviceNetworkClient NetworkClient = new DeviceNetworkClient(String.Format("{0}/Components/Network", ServiceConfiguration.Instance.DeviceServiceAddress));
        private DecodingUnitsClient DecodingClient = new DecodingUnitsClient(String.Format("{0}/Components/DecodingUnits", ServiceConfiguration.Instance.DeviceServiceAddress));
        private PanoCamerasClient CamerasClient = new PanoCamerasClient(String.Format("{0}/Components/PanoCameras", ServiceConfiguration.Instance.DeviceServiceAddress));
        private System.Timers.Timer AlarmTimer = new System.Timers.Timer();
        /// <summary>
        /// 
        /// </summary>
        /// <param name="port"></param>
        public Howell5198ServerAppInstance(Int32 port)
        {
            m_Server = new Howell5198Server(port, this);

            m_Server.SessionClosed += new EventHandler<SessionClosedEventArgs>(m_Server_SessionClosed);
            m_Server.SessionRegistered += new EventHandler<SessionRegisteredEventArgs>(m_Server_SessionRegistered);
            m_Server.StreamSessionRegistered += new EventHandler<StreamSessionRegisteredEventArgs>(m_Server_StreamSessionRegistered);
            m_Server.StreamSessionClosed += new EventHandler<StreamSessionClosedEventArgs>(m_Server_StreamSessionClosed);
            m_Server.Error += new EventHandler<Howell5198.ErrorEventArgs>(m_Server_Error);
            AlarmTimer.Enabled = true;
            AlarmTimer.Interval =3000;
            //设置是否重复计时，如果该属性设为False,则只执行timer_Elapsed方法一次。
            AlarmTimer.AutoReset = true;
            AlarmTimer.Elapsed += new System.Timers.ElapsedEventHandler(timer_Elapsed);      
        }
        private void timer_Elapsed(object sender, System.Timers.ElapsedEventArgs e)
        {
            lock (m_AlarmSessions)
            {
                LinkedList<string> Useless = new LinkedList<string>();
                foreach (KeyValuePair<string, Howell5198Session> kvp in m_AlarmSessions)
                {
                    if (kvp.Value.IsConnected())
                    {
                        AlarmData alarmData = new AlarmData();
                        kvp.Value.TrySend(0, COMMAND.AlarmHeartbeat, alarmData.GetBytes());
                    }
                    else
                    {
                        Useless.AddLast(kvp.Key);
                    }
                }
                foreach(string key in Useless)
                {
                    m_AlarmSessions.Remove(key);
                }
            }
            

        }

        public void Start()
        {
            m_Server.Start();
           AlarmTimer.Start();
            Console.WriteLine("服务端已启动");
            ServiceEnvironment.Instance.Logger.Info("服务端已启动");
        }

        public void Stop()
        {
            //if (Client != null)
            //{
            //    try
            //    {    
            //        Client.Dispose();
            //        Client = null;
            //    }
            //    catch(Exception ex)
            //    {
            //        ServiceEnvironment.Instance.Logger.Error(ex);
            //    }
            //}
            AlarmTimer.Stop();
            m_Server.Stop();
            Dispose();
            try
            {
                foreach (MTSession val in m_mtsessions.Values)
                {
                    val.Close();
                }
                Monitor.Enter(mtsessions_lock);
                m_mtsessions.Clear();
                Monitor.Exit(mtsessions_lock);
            }
          catch(Exception ex)
            {
                ServiceEnvironment.Instance.Logger.Error("VideoClient关闭异常",ex);
            }
            lock (m_AlarmSessions)
            {
                m_AlarmSessions.Clear();
            }


            if (Monitor.TryEnter(HWheaders_lock,3000))
            {
                m_HWheaders.Clear();
                Monitor.Exit(HWheaders_lock);
            }
            else
            {
                ServiceEnvironment.Instance.Logger.Warn("HWheaders_lock进入失败");
            }
            
            Console.WriteLine("服务端已停止");
            ServiceEnvironment.Instance.Logger.Info("服务端已停止");
        }

        public static DataManagementClient CreatNewDataManagementClient()
        {
            AuthenticationServiceClient authClient = new AuthenticationServiceClient(ServiceConfiguration.Instance.AuthenticationServiceAddress);
            String username = ServiceConfiguration.Instance.UserName;
            String password = new MD5().EncryptToString(ServiceConfiguration.Instance.Password);
            ServerNonce nonce = authClient.GetNonce(username);
            String clientNonce = Guid.NewGuid().ToString("N");
            String vertifySess = new MD5().EncryptToString(String.Format("{0}@{1}:{2}:{3}:{4}", username, nonce.Domain, nonce.Nonce, clientNonce, password.ToLower()));
            Howell.Net.DataService.Fault sess = authClient.Authenticate(new ClientCredential() { UserName = "howell", PhysicalAddress = "00-00-00-00-00-00", ClientNonce = clientNonce, Domain = nonce.Domain, Nonce = nonce.Nonce, VerifySession = vertifySess.ToLower() });
            DataManagementClient managementClient = new DataManagementClient(ServiceConfiguration.Instance.DataManagementServiceAddress);
            managementClient.SetClientCredential(username, sess.Id, nonce.Domain, vertifySess.ToLower());
            return managementClient;
        }
        public void Dispose()
        {
            m_Server.Dispose();
        }

        //private void KeepClientLive()
        //{

        //    lock (Client)
        //    {
        //        if (Client.IsConnected == false)
        //        {
        //            try
        //            {
        //                Client.Connect();
        //            }
        //            catch (Exception ex)
        //            {
        //                ServiceEnvironment.Instance.Logger.Error("MTClient ReConnect Error.", ex);
        //            }
        //        }
        //    }
           
        //}
        private HW_MediaInfo CreatHWHeader(Howell.eCamera.Middlewares.Medium.GETCODECACK codec)
        {
            int videoCodec = 0;
            int audioCodec = 1;
            int audioBits = 8;
            if (codec != null && codec.Media.Meta != null && codec.Media.Meta.Video != null)
            {
                if (codec.Media.Meta.Video.Codec == "h264")
                {
                    videoCodec = 0;
                }
                else if (codec.Media.Meta.Video.Codec == "h265")
                {
                    videoCodec = 0x0f;
                }
                else if (codec.Media.Meta.Video.Codec == "h265_encrypt")
                {
                    videoCodec = 0x10;
                }
                else if (codec.Media.Meta.Video.Codec == "mjpeg")
                {
                    videoCodec = 0x06;
                }
            }
            if (codec != null && codec.Media.Meta != null && codec.Media.Meta.Audio != null)
            {
                if (codec.Media.Meta.Audio.Codec == "hisi_adpcm_div")
                {
                    audioBits = codec.Media.Meta.Audio.BitWidth;
                    audioCodec = 5;
                }
                else if(codec.Media.Meta.Audio.Codec=="g.711a")
                {
                    
                    audioBits = codec.Media.Meta.Audio.BitWidth;
                    audioCodec = 2;
                }
            }
            HW_MediaInfo header = new HW_MediaInfo()
            {
                Media_fourcc = 0x48574D49,
                Adec_code = audioCodec,//G.711U,
                Dvr_version = 0,
                Vdec_code = videoCodec,//H264
                Au_bits = (Byte)audioBits,
                Au_channel = 1,
                Au_sample = 8,
                Reserve = new Byte[3],
                Reserved = new Int32[3]
            };
            return header;
        }

        void m_Server_SessionRegistered(object sender, SessionRegisteredEventArgs e)
        {
            Console.WriteLine("客户:{0} 已连接,IP:{1}",e.Session.Context.UserName,e.Session.RemoteEndPoint.ToString());
            ServiceEnvironment.Instance.Logger.Info(String.Format("客户:{0} 已连接,IP:{1}", e.Session.Context.UserName, e.Session.RemoteEndPoint.ToString()));
        }

        void m_Server_StreamSessionRegistered(object sender, StreamSessionRegisteredEventArgs e)
        {            
            int solt = e.Session.Context.ChannelNo;         
            if(e.Session.Context.Type==1)
            {
                solt += 10000;
            }

            Console.WriteLine(String.Format("请求通道{0}的类型{1}流会话{2} 已建立,来自客户端的流连接总数为{3}", e.Session.Context.ChannelNo, e.Session.Context.Type, e.Session.Context.SessionID, m_Server.StreamCount));
            ServiceEnvironment.Instance.Logger.Info(String.Format("请求通道{0}的类型{1}流会话{2} 已建立,来自客户端的流连接总数为{3}", e.Session.Context.ChannelNo, e.Session.Context.Type, e.Session.Context.SessionID, m_Server.StreamCount));
      

            FramePayload framepayload = new FramePayload();
            if (e.Session.Context.Type == 0)
                framepayload.FrameType = FramePayload.frametype.HW_FRAME_VIDEO_HEAD;
            else if (e.Session.Context.Type == 1)
                framepayload.FrameType = FramePayload.frametype.HW_FRAME_VIDEO_SUB_HEAD;

            if (Monitor.TryEnter(HWheaders_lock, 3000))
            {
                try
                {
                    if (m_mtsessions.ContainsKey(solt) == false)
                        return;
                    if (m_HWheaders.ContainsKey(solt) == false)
                    {
                        if (m_mtsessions[solt].VideoClient == null)
                        {
                            ServiceEnvironment.Instance.Logger.Warn("m_Server_StreamSessionRegistered,GetCodec时，VideoClient为空");
                            e.Session.Close();
                            return;
                        }
                        Howell.eCamera.Middlewares.Medium.GETCODECACK codec = m_mtsessions[solt].VideoClient.GetCodec(m_mtsessions[solt].DeviceID, m_mtsessions[solt].ChannelNo, e.Session.Context.Type);
                        Console.WriteLine("Video:{0} Resolution:{1}*{2}", codec.Media.Meta.Video.Codec, codec.Media.Meta.Video.Resolution[0], codec.Media.Meta.Video.Resolution[1]);
                        ServiceEnvironment.Instance.Logger.Info(String.Format("Video:{0} Resolution:{1}*{2}", codec.Media.Meta.Video.Codec, codec.Media.Meta.Video.Resolution[0], codec.Media.Meta.Video.Resolution[1]));
                        HW_MediaInfo hwheader = CreatHWHeader(codec);
                        m_HWheaders.Add(solt, hwheader);
                    }
                    framepayload.FrameData = m_HWheaders[solt].GetBytes();
                }
                catch (Exception ex)
                {
                    Console.WriteLine(String.Format("StreamSessionRegistered CreatHWHeader Error,ChannelNo:{0}. {1}", e.Session.Context.ChannelNo, ex.Message));
                    ServiceEnvironment.Instance.Logger.Error(String.Format("StreamSessionRegistered CreatHWHeader Error,ChannelNo:{0}", e.Session.Context.ChannelNo), ex);
                    e.Session.Close();
                    return;
                }
                finally
                {
                    Monitor.Exit(HWheaders_lock);
                }
            }
            else
            {
                ServiceEnvironment.Instance.Logger.Warn("m_Server_StreamSessionRegistered时，HWheaders_lock进入失败");
                e.Session.Close();
                return;
            }
         
            if (e.Session.IsConnected() == false)
                return;
            e.Session.TrySend(framepayload);
            //int count=0;
            //while (e.Session.TrySend(framepayload) == false)
            //{
            //    Thread.Sleep(10);
            //    if (e.Session.IsConnected() == false)
            //        return;
            //    count++;
            //    if(count==50)
            //    {
            //        e.Session.Close();
            //        return;
            //    }
            //}
            m_mtsessions[solt].Subscribe(e.Session);
        }

        void m_Server_SessionClosed(object sender, SessionClosedEventArgs e)
        {

            Console.WriteLine(String.Format("客户：{0} 已断开", e.Session.Context.UserName));
           ServiceEnvironment.Instance.Logger.Info(String.Format("客户：{0} 已断开", e.Session.Context.UserName));

               
        }
        void m_Server_StreamSessionClosed(object sender, StreamSessionClosedEventArgs e)
        {          
            int solt = e.StreamSession.Context.ChannelNo;
            if (e.StreamSession.Context.Type == 1)
                solt += 10000;
            if(e.StreamSession.Context.Type==2)
            {
                lock (m_filesessions)
                {
                    MTClient fileclient = m_filesessions.FirstOrDefault(q => q.Value == e.StreamSession).Key;
                    fileclient.Close();
                    fileclient.Dispose();
                    m_filesessions.Remove(fileclient);
                }
                Console.WriteLine(String.Format("回放流会话{0} 已断开,回放流连接总数为{1},关闭原因{2}", e.StreamSession.Context.SessionID, m_filesessions.Count,e.CloseReason));
                ServiceEnvironment.Instance.Logger.Info(String.Format("回放流会话{0} 已断开,回放流连接总数为{1},关闭原因{2}", e.StreamSession.Context.SessionID, m_filesessions.Count, e.CloseReason));
                return;
            }


            Console.WriteLine(String.Format("请求通道{0}的类型{1}流会话{2} 已断开,来自客户端的流连接总数为{3},关闭原因{4}", e.StreamSession.Context.ChannelNo, e.StreamSession.Context.Type, e.StreamSession.Context.SessionID, m_Server.StreamCount, e.CloseReason));
            ServiceEnvironment.Instance.Logger.Info(String.Format("请求通道{0}的类型{1}流会话{2} 已断开,来自客户端的流连接总数为{3},关闭原因{4}", e.StreamSession.Context.ChannelNo, e.StreamSession.Context.Type, e.StreamSession.Context.SessionID, m_Server.StreamCount, e.CloseReason));
            if (m_mtsessions.ContainsKey(solt) == false)
                return;
            m_mtsessions[solt].RemoveSession(e.StreamSession);

            if (m_mtsessions[solt].StreamSessions!=null&&m_mtsessions[solt].StreamSessions.Count > 0)//还存在指定通道号的流的话就跳过断开VideoClient;
            {
            }
            else
            {
                MTSession target = null;
                try
                {
                    Monitor.Enter(mtsessions_lock);
                    if (m_mtsessions.SyncRemoveGet(solt, out target))
                    {
                        target.Close();
                        Console.WriteLine(String.Format("通道{0}的类型{1}预览流已断开,目前接收视频流的来源数量为{2}", e.StreamSession.Context.ChannelNo, e.StreamSession.Context.Type, m_mtsessions.Count));
                        ServiceEnvironment.Instance.Logger.Info(String.Format("通道{0}的类型{1}预览流已断开,目前接收视频流的来源数量为{2}", e.StreamSession.Context.ChannelNo, e.StreamSession.Context.Type, m_mtsessions.Count));
                    }
                }
                finally
                {
                    Monitor.Exit(mtsessions_lock);
                }

                if (Monitor.TryEnter(HWheaders_lock, 3000))
                {
                    try
                    {
                        if (m_HWheaders.ContainsKey(solt))
                        {
                            m_HWheaders.Remove(solt);
                        }
                    }
                    finally
                    {
                        Monitor.Exit(HWheaders_lock);
                    }
                }
                else
                {
                    Console.WriteLine("m_Server_StreamSessionClosed时，HWheaders_lock进入失败");
                    ServiceEnvironment.Instance.Logger.Warn("m_Server_StreamSessionClosed时，HWheaders_lock进入失败");
                }
            }
      
        }

        void m_Server_Error(object sender, Howell5198.ErrorEventArgs e)
        {
            Console.WriteLine(e.Exception.Message);
            ServiceEnvironment.Instance.Logger.Error("5198Server_NewRequestReceived Error.", e.Exception);
            ServiceEnvironment.Instance.Logger.Error(e.Exception.StackTrace);
            if(e.Exception.InnerException!=null)
            {
                ServiceEnvironment.Instance.Logger.Error("InnerException", e.Exception.InnerException);
            }
        }
        /// <summary>
        /// 登陆
        /// </summary>
        /// <param name="session">请求对象的会话信息</param>
        /// <param name="type">暂时未使用</param>
        /// <param name="logName">用户名</param>
        /// <param name="logPassword">密码</param>
        /// <param name="clientUserID">暂时未使用</param>
        /// <returns>服务器应答</returns>
        public LoginResponse Login(LoginRequest loginrequest)
        {
            LoginResponse response = new LoginResponse();
            
            response.Success = 0;
         
            return response;
        }
        /// <summary>
        /// 获取服务器信息
        /// </summary>
        /// <returns>服务器应答</returns>
        public ServerInfo GetServerInfo()
        {
            Console.WriteLine("客户端请求ServerInfo");
            ServiceEnvironment.Instance.Logger.Info("客户端请求ServerInfo");
            ServerInfo response = new ServerInfo();
            response.SlotCount = 9999;
            response.SverVersion = 65000;
            response.NetVersion = 1;
            return response;
        }
        /// <summary>
        /// 获取实时编码数据
        /// </summary>
        /// <param name="session">请求对象的会话信息</param>
        /// <param name="channelno">通道号</param>
        /// <param name="type">0:主码流 1:子码流</param>
        /// <returns>服务器应答</returns>
        public StreamResponse GetStream(StreamSession session)
        {
            StreamResponse response = new StreamResponse();
            int solt = session.Context.ChannelNo;
            if (session.Context.Type == 1)//子码流在m_mtsessions中的key值为 通道号+10000
            {
                solt += 10000;
            }
            Monitor.Enter(mtsessions_lock);
            try
            {
                if (m_mtsessions.ContainsKey(solt) == false)
                {
                    try
                    {
                        m_mtsessions.Add(solt, new MTSession());       
                        m_mtsessions[solt].Connect(session);
                    }
                    catch (Exception ex)
                    {
                        response.Success = -1;
                        m_mtsessions[solt].Close();
                        m_mtsessions.Remove(solt);
                        Console.WriteLine(String.Format("GetStream Error. {0} ", ex.Message));
                        ServiceEnvironment.Instance.Logger.Error("GetStream Error.", ex);
                    }
                }
                else
                {
                    if (m_mtsessions[solt].VideoClient == null)
                    {
                        response.Success = -1;
                        Console.WriteLine("GetStream Error. VideoClient is Disposed");
                        ServiceEnvironment.Instance.Logger.Error("GetStream Error. VideoClient is Disposed");
                        m_mtsessions.Remove(solt);
                    }
                    else if (m_mtsessions[solt].VideoClient.IsConnected == false)//VideoClient超时,断开相关的StreamSession
                    {
                        response.Success = -1;
                        int streamcount = m_mtsessions[solt].StreamSessions.Count;
                        m_mtsessions[solt].Close();
                        Console.WriteLine(String.Format("{0}个流会话 已断开,来自客户端的流连接总数为{1},关闭原因{2}", streamcount, m_Server.StreamCount, "VideoClient is unConnected"));
                        ServiceEnvironment.Instance.Logger.Info(String.Format("{0}个流会话 已断开,来自客户端的流连接总数为{1},关闭原因{2}", streamcount, m_Server.StreamCount, "VideoClient is unConnected"));
                       
                        Console.WriteLine("GetStream Error. VideoClient is unConnected");
                        ServiceEnvironment.Instance.Logger.Info("GetStream Error. VideoClient is unConnected");
                        m_mtsessions.Remove(solt);
                    }
                }
            }
            finally
            {
                Monitor.Exit(mtsessions_lock);
            }
            return response;       
        }

        /// <summary>
        /// 获取色彩
        /// </summary>
        /// <param name="channelno">通道号</param>
        /// <returns>帧数据</returns>
        public ColorInfo GetColor(Howell5198Session session, Int32 channelno)
        {
            Console.WriteLine("客户端请求ColorInfo");
            ColorInfo response = new ColorInfo();
            response.Slot = 0;
            response.Brightness = 110;
            return response;
        }
        /// <summary>
        /// 设置色彩
        /// </summary>
        /// <param name="session">请求对象的会话信息</param>
        /// <param name="setColorRequest"></param>
        /// <returns>GetColorResponse</returns>
        public SetColorResponse SetColor(Howell5198Session session, ColorInfo setColorRequest)
        {
            Console.WriteLine("客户端设置ColorInfo");
            SetColorResponse response = new SetColorResponse();
            return response;
        }
        /// <summary>
        /// 获取通道名称
        /// </summary>
        /// <param name="session">请求对象的会话信息</param>
        /// <param name="getOsdChannelRequest"></param>
        /// <returns>GetOsdChannelResponse</returns>
        public OsdChannelInfo GetOsdChannel(Howell5198Session session, GetOsdChannelRequest getOsdChannelRequest)
        {

            Console.WriteLine("客户端请求OsdChannelInfo");
            OsdChannelInfo response = new OsdChannelInfo();
            response.Left = 0;
            response.Top = 0;
            response.Name = "OsdChannel";
            return response;
        }
        /// <summary>
        /// 设置通道名称
        /// </summary>
        /// <param name="session">请求对象的会话信息</param>
        /// <param name="setOsdChannelRequest"></param>
        /// <returns>SetOsdChannelResponse</returns>
        public SetOsdChannelResponse SetOsdChannel(Howell5198Session session, OsdChannelInfo setOsdChannelRequest)
        {
            Console.WriteLine("客户端设置OsdChannelInfo");
            SetOsdChannelResponse response = new SetOsdChannelResponse();
            return response;
        }
        /// <summary>
        /// 获取通道日期
        /// </summary>
        /// <param name="session">请求对象的会话信息</param>
        /// <param name="getOsdDateRequest"></param>
        /// <returns>GetOsdDateResponse</returns>
        public OsdDateInfo GetOsdDate(Howell5198Session session, GetOsdDateRequest getOsdDateRequest)
        {
            Console.WriteLine("客户端请求OsdDateInfo");
            OsdDateInfo response = new OsdDateInfo();
            return response;
        }
        /// <summary>
        /// 设置通道日期
        /// </summary>
        /// <param name="session">请求对象的会话信息</param>
        /// <param name="getOsdDateRequest"></param>
        /// <returns>GetOsdDateResponse</returns>
        public SetOsdDateResponse SetOsdDate(Howell5198Session session, OsdDateInfo setOsdDateRequest)
        {
            Console.WriteLine("客户端设置OsdDateInfo");
            SetOsdDateResponse response = new SetOsdDateResponse();
            return response;
        }
        /// <summary>
        /// 获取图像质量
        /// </summary>
        /// <param name="session">请求对象的会话信息</param>
        /// <param name="getVideoQualityRequest"></param>
        /// <returns>GetVideoQualityResponse</returns>
        public VideoQualityInfo GetVideoQuality(Howell5198Session session, GetVideoQualityRequest getVideoQualityRequest)
        {
            Console.WriteLine("客户端请求VideoQualityInfo");
            VideoQualityInfo response = new VideoQualityInfo();
            response.EncodeType = 3;
            return response;
        }
        /// <summary>
        /// 设置图像质量
        /// </summary>
        /// <param name="session">请求对象的会话信息</param>
        /// <param name="setVideoQualityRequest"></param>
        /// <returns>SetVideoQualityResponse</returns>
        public SetVideoQualityResponse SetVideoQuality(Howell5198Session session, VideoQualityInfo setVideoQualityRequest)
        {
            Console.WriteLine("客户端设置VideoQualityInfo");
            SetVideoQualityResponse response = new SetVideoQualityResponse();
            return response;
        }
        /// <summary>
        /// 获取码流类型
        /// </summary>
        /// <param name="session">请求对象的会话信息</param>
        /// <param name="getStreamTypeRequest"></param>
        /// <returns>GetStreamTypeResponse</returns>
        public StreamTypeInfo GetStreamType(Howell5198Session session, GetStreamTypeRequest getStreamTypeRequest)
        {
            Console.WriteLine("客户端请求StreamTypeInfo");
            StreamTypeInfo response = new StreamTypeInfo();
            return response;
        }
        /// <summary>
        /// 设置码流类型
        /// </summary>
        /// <param name="session">请求对象的会话信息</param>
        /// <param name="setStreamTypeRequest"></param>
        /// <returns>SetStreamTypeResponse</returns>
        public SetStreamTypeResponse SetStreamType(Howell5198Session session, StreamTypeInfo setStreamTypeRequest)
        {
            Console.WriteLine("客户端设置StreamTypeInfo");
            SetStreamTypeResponse response = new SetStreamTypeResponse();
            return response;
        }
        /// <summary>
        /// 获取网络
        /// </summary>
        /// <param name="session">请求对象的会话信息</param>
        /// <returns>GetNetInfoResponse</returns>
        public NetInfo GetNetInfo(Howell5198Session session)
        {
            Console.WriteLine("客户端请求NetInfo");
            NetInfo response = new NetInfo();
            response.SDvrIp = "127.0.0.1";
            response.SDvrMaskIp = "255.255.255.0";
            response.SPPPoEIP = "192.168.21.133";
            response.SPPPoEPassword = "12345";
            response.SPPPoEUser = "admin";
            response.Gateway = "192.168.18.1";
            response.Dns = "8.8.8.8";
            response.SMultiCastIP = "0.0.0.0";
            return response;
        }
        /// <summary>
        /// 设置网络
        /// </summary>
        /// <param name="session">请求对象的会话信息</param>
        /// <param name="setNetInfoRequest"></param>
        /// <returns>SetNetInfoResponse</returns>
        public SetNetInfoResponse SetNetInfo(Howell5198Session session, NetInfo setNetInfoRequest)
        {
            Console.WriteLine("客户端设置NetInfo");
            SetNetInfoResponse response = new SetNetInfoResponse();
            return response;
        }
        /// <summary>
        /// 获取时间
        /// </summary>
        /// <param name="session">请求对象的会话信息</param>
        /// <returns>GetSystemTimeResponse</returns>
        public SystemTimeInfo GetSystemTime(Howell5198Session session)
        {
            Console.WriteLine("客户端请求SystemTimeInfo");
            SystemTimeInfo response = new SystemTimeInfo();
            response.WYear = 2016;
            response.WMonth = 8;
            response.WDay = 15;
            response.WHour = 15;
            response.WMinute = 38;
            response.WSecond = 23;
            response.WMilliseconds = 222;
            return response;
        }
        /// <summary>
        /// 设置时间
        /// </summary>
        /// <param name="session">请求对象的会话信息</param>
        /// <param name="setSystemTimeRequest"></param>
        /// <returns>SetSystemTimeResponse</returns>
        public SetSystemTimeResponse SetSystemTime(Howell5198Session session, SystemTimeInfo setSystemTimeRequest)
        {
            Console.WriteLine("客户端设置SystemTimeInfo");
            SetSystemTimeResponse response = new SetSystemTimeResponse();
            return response;
        }
        /// <summary>
        /// 重启设备
        /// </summary>
        /// <param name="session">请求对象的会话信息</param>
        /// <returns>GetSystemTimeResponse</returns>
        public RestartDeviceResponse RestartDevice(Howell5198Session session)
        {
            RestartDeviceResponse response = new RestartDeviceResponse();
            try
            {
                SystemClient.Reboot();
            }
            catch (Exception ex)
            {
                Console.WriteLine(String.Format("RestartDevice Error. {0}", ex.Message));
                ServiceEnvironment.Instance.Logger.Error("RestartDevice Error", ex);
                response.Success = -1;
            }
            return response;
        }
        /// <summary>
        /// 关闭设备
        /// </summary>
        /// <param name="session">请求对象的会话信息</param>
        /// <returns>GetSystemTimeResponse</returns>
        public CloseDeviceResponse CloseDevice(Howell5198Session session)
        {
            CloseDeviceResponse response = new CloseDeviceResponse();
            try
            {
                SystemClient.Shutdown();
            }
            catch (Exception ex)
            {
                Console.WriteLine(String.Format("CloseDevice Error. {0}", ex.Message));
                ServiceEnvironment.Instance.Logger.Error("CloseDevice Error", ex);
                response.Success = -1;
            }
            return response;
        }
        /// <summary>
        /// 重置设备
        /// </summary>
        /// <param name="session">请求对象的会话信息</param>
        /// <returns>GetSystemTimeResponse</returns>
        public ResetDeviceResponse ResetDevice(Howell5198Session session)
        {
            ResetDeviceResponse response = new ResetDeviceResponse();
            return response;
        }
        /// <summary>
        /// 获取串口模式
        /// </summary>
        /// <param name="session">请求对象的会话信息</param>
        /// <returns>GetSystemTimeResponse</returns>
        public Rs232CfgInfo GetRs232Cfg(Howell5198Session session, GetRs232CfgRequest getRs232CfgRequest)
        {
            Console.WriteLine("客户端请求Rs232CfgInfo");
            Rs232CfgInfo response = new Rs232CfgInfo();
            return response;
        }
        /// <summary>
        /// 设置串口模式
        /// </summary>
        /// <param name="session">请求对象的会话信息</param>
        /// <param name="setSystemTimeRequest"></param>
        /// <returns>SetSystemTimeResponse</returns>
        public SetRs232CfgResponse SetRs232Cfg(Howell5198Session session, Rs232CfgInfo setRs232CfgRequest)
        {
            Console.WriteLine("客户端设置Rs232CfgInfo");
            SetRs232CfgResponse response = new SetRs232CfgResponse();
            return response;
        }
        /// <summary>
        /// 获取PTZ设置
        /// </summary>
        /// <param name="session">请求对象的会话信息</param>
        /// <returns>GetSystemTimeResponse</returns>
        public PtzRs232CfgInfo GetPtzRs232Cfg(Howell5198Session session, GetPtzRs232CfgRequest getRs232CfgRequest)
        {
            Console.WriteLine("客户端请求PtzRs232CfgInfo");
            PtzRs232CfgInfo response = new PtzRs232CfgInfo();
            return response;
        }
        /// <summary>
        /// 设置PTZ设置
        /// </summary>
        /// <param name="session">请求对象的会话信息</param>
        /// <param name="setSystemTimeRequest"></param>
        /// <returns>SetSystemTimeResponse</returns>
        public SetPtzRs232CfgResponse SetPtzRs232Cfg(Howell5198Session session, PtzRs232CfgInfo setRs232CfgRequest)
        {
            Console.WriteLine("客户端设置PtzRs232CfgInfo");
            SetPtzRs232CfgResponse response = new SetPtzRs232CfgResponse();
            return response;
        }
        /// <summary>
        /// PTZ命令控制
        /// </summary>
        /// <param name="session">请求对象的会话信息</param>
        /// <param name="ptzControlRequest"></param>
        /// <returns>PtzControlResponse</returns>
        public PtzControlResponse PtzControl(Howell5198Session session, PtzControlRequest ptzControlRequest)
        {
            Console.WriteLine("客户端请求PtzControl");
            ServiceEnvironment.Instance.Logger.Info("客户端请求PtzControl");
            PtzControlResponse response = new PtzControlResponse();

            var managementClient = CreatNewDataManagementClient();
            var pseudodev = managementClient.GetVideoInputChannelByPseudoCode(Convert.ToString(ptzControlRequest.Slot + 1));
            Identity channelid = Identity.Parse(pseudodev.Id);
            Howell.Net.DataService.Fault error = null;
            if(ptzControlRequest.ControlType==0)//direct
            {
                Howell.Industry.PTZDirection direction=Howell.Industry.PTZDirection.Stop;
                switch(ptzControlRequest.Cmd)
                {
                    case 5:
                        direction=Howell.Industry.PTZDirection.Stop;
                        break;
                    case 8:
                        direction=Howell.Industry.PTZDirection.Up;
                        break;
                    case 2:
                        direction=Howell.Industry.PTZDirection.Down;
                        break;
                    case 4:
                        direction=Howell.Industry.PTZDirection.Left;
                        break;
                    case 6:
                        direction=Howell.Industry.PTZDirection.Right;
                        break;
                    default:
                        direction=Howell.Industry.PTZDirection.Stop;
                        break;
                }
                error=managementClient.PTZDirectionControl(channelid.GetDeviceIdentity().ToString(), pseudodev.Id, direction, ptzControlRequest.Presetno);
            }
            else if(ptzControlRequest.ControlType==1)//len
            {
                Howell.Industry.PTZLens lens=Howell.Industry.PTZLens.Stop;
                if (ptzControlRequest.Cmd > 0 && ptzControlRequest.Cmd<7)
                    lens = (Howell.Industry.PTZLens)ptzControlRequest.Cmd;
                error = managementClient.PTZLensControl(channelid.GetDeviceIdentity().ToString(), pseudodev.Id, lens, ptzControlRequest.Presetno);
            }
            else if(ptzControlRequest.ControlType==3)//preset
            {
                Howell.Industry.PTZPreset preset;
                 switch(ptzControlRequest.Cmd)
                {
                    case 1:
                        preset=Howell.Industry.PTZPreset.Set;
                        break;
                    case 2:
                        preset=Howell.Industry.PTZPreset.Clear;
                        break;
                    case 3:
                        preset=Howell.Industry.PTZPreset.Goto;
                        break;
                    default:
                        preset=Howell.Industry.PTZPreset.Goto;
                        break;
                }
                 error = managementClient.PTZPresetControl(channelid.GetDeviceIdentity().ToString(), pseudodev.Id, preset, ptzControlRequest.Presetno, 50);
            }
            else
            {
                response.Success = -1;
            }
            if (error.FaultCode != 0)
                response.Success = -1;
            return response;
        }

        public SearchFileResponse SearchFile(Howell5198Session session, SearchFileRequest searchFileRequest)
        {
            Console.WriteLine("客户端请求SearchFile");
            ServiceEnvironment.Instance.Logger.Info("客户端请求SearchFile");
            
            VideoInputChannel pseudodev = CreatNewDataManagementClient().GetVideoInputChannelByPseudoCode(Convert.ToString(searchFileRequest.ChannelNo + 1));
            Identity channelid = Identity.Parse(pseudodev.Id);
            //int solt=searchFileRequest.ChannelNo;
            DateTime beg = new DateTime(searchFileRequest.Beg.WYear, searchFileRequest.Beg.WMonth, searchFileRequest.Beg.WDay, searchFileRequest.Beg.WHour, searchFileRequest.Beg.WMinute, searchFileRequest.Beg.WSecond, searchFileRequest.Beg.WMilliseconds, DateTimeKind.Local);
            DateTime end = new DateTime(searchFileRequest.End.WYear, searchFileRequest.End.WMonth, searchFileRequest.End.WDay, searchFileRequest.End.WHour, searchFileRequest.End.WMinute, searchFileRequest.End.WSecond, searchFileRequest.End.WMilliseconds, DateTimeKind.Local);
            TimeSpan ts = end - beg;
            TimeSpan maxtime = new TimeSpan(30, 0, 0, 0, 0);
            if (ts > maxtime)
                beg = end - maxtime;
            MTClient Client = null;
               
            try
            {
                Client = new MTClient(new System.Net.IPEndPoint(System.Net.IPAddress.Parse(ServiceConfiguration.Instance.MTServerIP), ServiceConfiguration.Instance.MTServerPort));
                Client.Credential = new MTClientCredential() { UserName = ServiceConfiguration.Instance.UserName, Password = ServiceConfiguration.Instance.Password, MobileTerminalId = Guid.NewGuid().ToString("N") };
                Client.Connect();
                IList<Howell.eCamera.Middlewares.Medium.RECORDEDFILE> recordedfiles = Client.GetRecordedFiles(channelid.GetDeviceIdentity().ToString(), channelid.ModuleNumber - 1, beg, end);
                Client.Close();
                Client.Dispose(); 
                Client = null;
                SearchFileResponse response = new SearchFileResponse();
                int count = 100;
                if (recordedfiles.Count < 100)
                    count = recordedfiles.Count;
                response.FileInfos = new SearchFileRequest[count];
                for (int i = 0; i < count; i++)
                {
                    response.FileInfos[i] = new SearchFileRequest() { Beg = new SystemTimeInfo(((DateTime)recordedfiles[i].BeginTime).ToLocalTime()), End = new SystemTimeInfo(((DateTime)recordedfiles[i].EndTime).ToLocalTime()), ChannelNo = searchFileRequest.ChannelNo, Type = searchFileRequest.Type };
                }
                return response;
            }
            catch (Exception ex)
            {
                Console.WriteLine("SearchFile Error." + ex.Message);
                ServiceEnvironment.Instance.Logger.Error("SearchFile Error.", ex);
                if(Client!=null)
                {
                    Client.Close();
                    Client.Dispose();
                    Client = null;
                }
               
                SearchFileResponse response = new SearchFileResponse();
                response.FileInfos = new SearchFileRequest[1];
                response.FileInfos[0] = new SearchFileRequest() { Beg = searchFileRequest.Beg, End = searchFileRequest.End, ChannelNo = searchFileRequest.ChannelNo, Type = searchFileRequest.Type };
                return response;
            }
        }
        public void GetFile(StreamSession session, GetFileRequest getFileRequest)
        {
            Console.WriteLine("客户端请求GetFile");
            ServiceEnvironment.Instance.Logger.Info("客户端请求GetFile");
            GetFileResponse response = new GetFileResponse() { ChannelNo = getFileRequest.ChannelNo,Buffer=new byte[100],Datalen=100,Type=0};
            int offset2 = 0;
            LittleEndian.WriteInt32(0, response.Buffer, ref offset2, 100);//beg_tm
            LittleEndian.WriteInt32(0, response.Buffer, ref offset2, 100);//end_tm
            int curfilelen=0;
            String begtime=getFileRequest.Beg.ToString();
            if(targetfilelen.ContainsKey(begtime))
                curfilelen=Convert.ToInt32(targetfilelen[begtime]);
            LittleEndian.WriteInt32(curfilelen, response.Buffer, ref offset2, 100);//file_len
            LittleEndian.WriteInt32(0, response.Buffer, ref offset2, 100);//record_type
            session.SendFile(response);


            int solt = getFileRequest.ChannelNo;
            MTClient fileclient=null;
            try
            {
                fileclient = new MTClient(new System.Net.IPEndPoint(System.Net.IPAddress.Parse(ServiceConfiguration.Instance.MTServerIP), ServiceConfiguration.Instance.MTServerPort));
                fileclient.Credential = new MTClientCredential() { UserName = ServiceConfiguration.Instance.UserName, Password = ServiceConfiguration.Instance.Password, MobileTerminalId = session.Context.SessionID };
                fileclient.Connect();  

                VideoInputChannel pseudodev = CreatNewDataManagementClient().GetVideoInputChannelByPseudoCode(Convert.ToString(session.Context.ChannelNo + 1));
                Identity channelid = Identity.Parse(pseudodev.Id);
                fileclient.MediaDataReceived += new MTClientMediaDataReceivedHandler(FileDataReceived);


                DateTime beg = new DateTime(getFileRequest.Beg.WYear, getFileRequest.Beg.WMonth, getFileRequest.Beg.WDay, getFileRequest.Beg.WHour, getFileRequest.Beg.WMinute, getFileRequest.Beg.WSecond, getFileRequest.Beg.WMilliseconds, DateTimeKind.Local);
                DateTime end = new DateTime(getFileRequest.End.WYear, getFileRequest.End.WMonth, getFileRequest.End.WDay, getFileRequest.End.WHour, getFileRequest.End.WMinute, getFileRequest.End.WSecond, getFileRequest.End.WMilliseconds, DateTimeKind.Local);
                fileclient.Subscribe(20000, channelid.GetDeviceIdentity().ToString(), channelid.ModuleNumber - 1, 0, beg, end);
                lock (m_filesessions)
                {
                    m_filesessions.Add(fileclient, session);
                }
                Console.WriteLine(String.Format("回放流会话{0} 已建立,回放流连接总数为{1}", session.Context.SessionID, m_filesessions.Count));
                ServiceEnvironment.Instance.Logger.Info(String.Format("回放流会话{0} 已建立,回放流连接总数为{1}", session.Context.SessionID, m_filesessions.Count));

            }
            catch (Exception ex)
            {
                ServiceEnvironment.Instance.Logger.Error("回放流打开失败.", ex);
                if(fileclient!=null)
                {
                    fileclient.Close();
                    fileclient.Dispose();
                    fileclient = null;
                }
            }       
        }
        void FileDataReceived(MTClient sender, MediaData mediaData)
        {
            //Console.WriteLine("ID:{0} SeqNo:{1} Count:{2}", mediaData.DialogId, mediaData.SeqNo, mediaData.FrameData.Count);
            // int handle = m_Streams[sender.Credential.MobileTerminalId];
            int handle = (int)mediaData.DialogId;
            if (handle == 20000)//回放流
            {
                if (m_filesessions[sender].IsConnected())
                {
                    int offset = 0;
                    while (offset < mediaData.FrameData.Count)
                    {
                        GetFileResponse filedata = new GetFileResponse();
                        filedata.ChannelNo = m_filesessions[sender].Context.ChannelNo;
                        filedata.Type = 1;
                        if (mediaData.FrameData.Count > (offset + filedata.Buffer.Length))
                        {
                            Buffer.BlockCopy(mediaData.FrameData.Array, mediaData.FrameData.Offset + offset, filedata.Buffer, 0, filedata.Buffer.Length);
                            filedata.Datalen = filedata.Buffer.Length;
                            offset += filedata.Buffer.Length;
                        }
                        else
                        {
                            Buffer.BlockCopy(mediaData.FrameData.Array, mediaData.FrameData.Offset + offset, filedata.Buffer, 0, mediaData.FrameData.Count - offset);
                            filedata.Datalen = mediaData.FrameData.Count - offset;
                            offset = mediaData.FrameData.Count;
                        }
                        bool sendout = m_filesessions[sender].TrySendFile(filedata);
                        int count = 0;
                        while (sendout == false)
                        {
                            Thread.Sleep(10);
                            sendout = m_filesessions[sender].TrySendFile(filedata);
                            if (m_filesessions[sender].IsConnected() == false)
                                return;
                            count++;
                            if (count > 200)
                            {
                                m_filesessions[sender].Close();
                                Console.WriteLine("回放流数据发送超时，主动关闭session");
                                ServiceEnvironment.Instance.Logger.Info("回放流数据发送超时，主动关闭session");
                                return;
                            }
                        }
                    }
                }
            }
            else
            {
                m_filesessions[sender].Close();
            }
        }
        public GetFileInfoResponse GetFileInfo(Howell5198Session session, GetFileInfoRequest getFileInfoRequest)
        {
            Console.WriteLine("客户端请求GetFileInfo");
            ServiceEnvironment.Instance.Logger.Info("客户端请求GetFileInfo");
           // int solt = getFileInfoRequest.ChannelNo;
            VideoInputChannel pseudodev = CreatNewDataManagementClient().GetVideoInputChannelByPseudoCode(Convert.ToString(getFileInfoRequest.ChannelNo + 1));
            Identity channelid = Identity.Parse(pseudodev.Id);
            DateTime beg = new DateTime(getFileInfoRequest.Beg.WYear, getFileInfoRequest.Beg.WMonth, getFileInfoRequest.Beg.WDay, getFileInfoRequest.Beg.WHour, getFileInfoRequest.Beg.WMinute, getFileInfoRequest.Beg.WSecond, getFileInfoRequest.Beg.WMilliseconds, DateTimeKind.Local);
            DateTime end = new DateTime(getFileInfoRequest.End.WYear, getFileInfoRequest.End.WMonth, getFileInfoRequest.End.WDay, getFileInfoRequest.End.WHour, getFileInfoRequest.End.WMinute, getFileInfoRequest.End.WSecond, getFileInfoRequest.End.WMilliseconds, DateTimeKind.Local);
            MTClient Client = null;
            try
            {
                Client = new MTClient(new System.Net.IPEndPoint(System.Net.IPAddress.Parse(ServiceConfiguration.Instance.MTServerIP), ServiceConfiguration.Instance.MTServerPort));
                Client.Credential = new MTClientCredential() { UserName = ServiceConfiguration.Instance.UserName, Password = ServiceConfiguration.Instance.Password, MobileTerminalId = Guid.NewGuid().ToString("N") };
                Client.Connect();
                Howell.eCamera.Middlewares.Medium.GETCODECACK codec = Client.GetCodec(channelid.GetDeviceIdentity().ToString(), channelid.ModuleNumber - 1, 0, beg, end);
                Client.Close();
                Client.Dispose();
                Console.WriteLine("Video:{0} Resolution:{1}*{2}", codec.Media.Meta.Video.Codec, codec.Media.Meta.Video.Resolution[0], codec.Media.Meta.Video.Resolution[1]);

                double videolen = 0;
                double audiolen = 0;
                TimeSpan ts = end.Subtract(beg);
                double totalsec = ts.TotalSeconds;
                int videoCodec = 0;
                int audioCodec = 1;
                int audioBits = 8;
                if (codec != null && codec.Media.Meta != null && codec.Media.Meta.Video != null)
                {
                    if (codec.Media.Meta.Video.Codec == "h264")
                    {
                        videoCodec = 0;
                    }
                    else if (codec.Media.Meta.Video.Codec == "h265")
                    {
                        videoCodec = 0x0f;
                    }
                    else if (codec.Media.Meta.Video.Codec == "h265_encrypt")
                    {
                        videoCodec = 0x10;
                    }
                    else if (codec.Media.Meta.Video.Codec == "mjpeg")
                    {
                        videoCodec = 0x06;
                    }
                    videolen = codec.Media.Meta.Video.Bitrate * totalsec * 1000 / 8;//视频数据的总byte数
                }
                if (codec != null && codec.Media.Meta != null && codec.Media.Meta.Audio != null)
                {
                    if (codec.Media.Meta.Audio.Codec == "hisi_adpcm_div")
                    {
                        audioBits = codec.Media.Meta.Audio.BitWidth;
                        audioCodec = 0x05;
                    }
                    audiolen = codec.Media.Meta.Audio.Samples * codec.Media.Meta.Audio.BitWidth * totalsec / 8;//数据量（字节/秒）= (采样频率（Hz）× 采样位数（bit） × 声道数)/ 8
                }

                GetFileInfoResponse response = new GetFileInfoResponse();
                response.FileFormatType = 65000;
                response.Video_dec = videoCodec;
                response.Audio_dec = audioCodec;
                response.ChannelNo = getFileInfoRequest.ChannelNo;
                response.Beg = getFileInfoRequest.Beg;
                response.End = getFileInfoRequest.End;

                double curfilelen = videolen + audiolen;
                if (curfilelen > Int32.MaxValue)
                    curfilelen = Int32.MaxValue;

                response.Reserved[0] = Convert.ToInt32(curfilelen);
                String begstr = getFileInfoRequest.Beg.ToString();
                lock (targetfilelen)
                {
                    if (targetfilelen.Count >= 50)
                        targetfilelen.Clear();
                    if (targetfilelen.ContainsKey(begstr) == false)
                    {
                        targetfilelen.Add(begstr, curfilelen);
                    }
                }
                return response;
            }
            catch(Exception ex)
            {
                Console.WriteLine("GetFileInfo Error." + ex.Message);
                ServiceEnvironment.Instance.Logger.Error("GetFileInfo Error.", ex);
                if (Client != null)
                {
                    Client.Close();
                    Client.Dispose();
                    Client = null;
                }
                GetFileInfoResponse response = new GetFileInfoResponse();
                return response;
            }
            
        }
        public GetNetHeadResponse GetNetHead(Howell5198Session session, GetNetHeadRequest getNetHeadRequest)
        {
            Console.WriteLine("客户端请求GetNetHead");
            ServiceEnvironment.Instance.Logger.Info("客户端请求GetNetHead");
            int solt=getNetHeadRequest.ChannelNo;
            if(getNetHeadRequest.IsSub>0)
                solt += 10000;
            VideoInputChannel pseudodev = CreatNewDataManagementClient().GetVideoInputChannelByPseudoCode(Convert.ToString(getNetHeadRequest.ChannelNo + 1));
            Identity channelid = Identity.Parse(pseudodev.Id);

            Byte[] nethead_buf = new Byte[128];
            GetNetHeadResponse response = null;
            MTClient Client = null;
            if (Monitor.TryEnter(HWheaders_lock, 3000))
            {
                try
                {
                    if (m_HWheaders.ContainsKey(solt))
                    {
                        Buffer.BlockCopy(m_HWheaders[solt].GetBytes(), 0, nethead_buf, 0, m_HWheaders[solt].GetLength());
                        response = new GetNetHeadResponse() { ChannelNo = getNetHeadRequest.ChannelNo, IsSub = getNetHeadRequest.IsSub, Buf = nethead_buf, Len = m_HWheaders[solt].GetLength() };
                    }
                    else
                    {
                        Client = new MTClient(new System.Net.IPEndPoint(System.Net.IPAddress.Parse(ServiceConfiguration.Instance.MTServerIP), ServiceConfiguration.Instance.MTServerPort));
                        Client.Credential = new MTClientCredential() { UserName = ServiceConfiguration.Instance.UserName, Password = ServiceConfiguration.Instance.Password, MobileTerminalId = Guid.NewGuid().ToString("N") };
                        Client.Connect();
                        Howell.eCamera.Middlewares.Medium.GETCODECACK codec = Client.GetCodec(channelid.GetDeviceIdentity().ToString(), channelid.ModuleNumber - 1, getNetHeadRequest.IsSub);
                        Client.Close();
                        Client.Dispose();
                        Console.WriteLine("Video:{0} Resolution:{1}*{2}", codec.Media.Meta.Video.Codec, codec.Media.Meta.Video.Resolution[0], codec.Media.Meta.Video.Resolution[1]);
                        ServiceEnvironment.Instance.Logger.Info(String.Format("Video:{0} Resolution:{1}*{2}", codec.Media.Meta.Video.Codec, codec.Media.Meta.Video.Resolution[0], codec.Media.Meta.Video.Resolution[1]));
                        HW_MediaInfo hwheader = CreatHWHeader(codec);
                        Buffer.BlockCopy(hwheader.GetBytes(), 0, nethead_buf, 0, hwheader.GetLength());
                        m_HWheaders.Add(solt, hwheader);
                        response = new GetNetHeadResponse() { ChannelNo = getNetHeadRequest.ChannelNo, IsSub = getNetHeadRequest.IsSub, Buf = nethead_buf, Len = hwheader.GetLength() };
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine(String.Format("GetNetHead Error. {0} ", ex.Message));
                    ServiceEnvironment.Instance.Logger.Error("GetNetHead Error.", ex);
                    if (Client != null)
                    {
                        Client.Close();
                        Client.Dispose();
                    }
                }
                finally
                {
                    Monitor.Exit(HWheaders_lock);
                }    
            }
            else
            {
                Console.WriteLine("GetNetHead时，HWheaders_lock进入失败");
                ServiceEnvironment.Instance.Logger.Warn("GetNetHead时，HWheaders_lock进入失败");
            }
            
            return response;       
        }
 

        public class MTSession
        {
            public MTSession()
            {
                VideoClient = null;
                StreamSessions = new List<StreamSession>();
                DeviceID = null;
                ChannelNo = 0;
            }
            public MTClient VideoClient;
            public List<StreamSession> StreamSessions;
            //public Identity Channelid;
            public String DeviceID;
            public int ChannelNo;
           private readonly Object VideoClient_lock = new Object();
           private readonly ReaderWriterLockSlim MTSession_lock = new ReaderWriterLockSlim();
           const int timeout = 30000;//connect与Subscribe时的超时时间
            public void Close()
            {
                if (Monitor.TryEnter(VideoClient_lock, 5000))
                {
                    try
                    {
                        if (VideoClient != null)
                        {
                            VideoClient.Close();
                            VideoClient.Dispose();
                            VideoClient = null;
                        }
                    }
                    finally
                    {
                        Monitor.Exit(VideoClient_lock); 
                    } 
                }
                else// 等待超时
                {
                    if (VideoClient != null)
                    {
                        VideoClient.Close();
                        VideoClient.Dispose();
                        VideoClient = null;
                    }
                 }
               
                MTSession_lock.EnterWriteLock();
                try
                {
                    foreach (StreamSession stream in StreamSessions)
                    {
                        if (stream.IsConnected())
                        {
                            stream.Close();
                        }
     
                    }
                    StreamSessions.Clear();
                }
                finally
                {
                    MTSession_lock.ExitWriteLock();
                }

            }
            public void AddSession(StreamSession streamsession)
            {
                MTSession_lock.EnterWriteLock();
                try
                {
                    StreamSessions.Add(streamsession);
                }
                finally
                {
                    MTSession_lock.ExitWriteLock();
                }
         
            }

            public void RemoveSession(StreamSession streamsession)
            {
                MTSession_lock.EnterWriteLock();
                try
                {
                    if (StreamSessions.Contains(streamsession))
                    {
                        StreamSessions.Remove(streamsession);
                    }     
                }
                finally
                {
                    MTSession_lock.ExitWriteLock();
                }       
            }

            public void Connect(StreamSession session)
            {
                VideoInputChannel pseudodev = CreatNewDataManagementClient().GetVideoInputChannelByPseudoCode(Convert.ToString(session.Context.ChannelNo + 1));
                if (Monitor.TryEnter(VideoClient_lock, timeout))
                {
                    try
                    {
                        VideoClient = new MTClient(new System.Net.IPEndPoint(System.Net.IPAddress.Parse(ServiceConfiguration.Instance.MTServerIP), ServiceConfiguration.Instance.MTServerPort));
                        VideoClient.Credential = new MTClientCredential() { UserName = ServiceConfiguration.Instance.UserName, Password = ServiceConfiguration.Instance.Password, MobileTerminalId = session.Context.SessionID };
                        VideoClient.Timeout = timeout;
                        VideoClient.Connect();
                        Identity Channelid = Identity.Parse(pseudodev.Id);
                        DeviceID = Channelid.GetDeviceIdentity().ToString();
                        ChannelNo = Channelid.ModuleNumber - 1;
                    }
                    catch (Exception ex)
                    {
                        if (VideoClient != null)
                        {
                            VideoClient.Close();
                            VideoClient.Dispose();
                            VideoClient = null;
                        }
                        throw ex;
                    }
                    finally
                    {
                        Monitor.Exit(VideoClient_lock);
                    } 
                }
                else// 等待超时
                {
                    Console.WriteLine("Connect时,未能获得VideoClient锁");
                    ServiceEnvironment.Instance.Logger.Warn("Connect时,未能获得VideoClient锁");
                }
            }
            public void Subscribe(StreamSession Session)
            {
                int solt = Session.Context.ChannelNo;
                if (Session.Context.Type == 1)
                {
                    solt += 10000;
                }

                if (Monitor.TryEnter(VideoClient_lock,timeout))
                {
                    try
                    {
                        if (VideoClient == null)
                            return;
                        if (VideoClient.IsSubscribed)
                        {
                            TimeSpan ts = DateTime.Now - VideoClient.LastMediaPacketTime;
                            TimeSpan timeout2 = new TimeSpan(0, 0, 20);
                            if (ts > timeout2)//超过20秒没收到过数据
                            {
                                Console.WriteLine(String.Format("通道{0}类型{1}的MTClient超过20秒未转发数据,服务端主动断开新连的Session", Session.Context.ChannelNo, Session.Context.Type));
                                ServiceEnvironment.Instance.Logger.Warn(String.Format("通道{0}类型{1}的MTClient超过20秒未转发数据,服务端主动断开新连的Session", Session.Context.ChannelNo, Session.Context.Type));
                                VideoClient.Close();
                                VideoClient.Dispose();
                                VideoClient = null;
                                MTSession_lock.EnterWriteLock();
                                try
                                {
                                    foreach (StreamSession stream in StreamSessions)
                                    {
                                        if (stream.IsConnected())
                                        {
                                            stream.Close();
                                        }

                                    }
                                    StreamSessions.Clear();
                                }
                                finally
                                {
                                    MTSession_lock.ExitWriteLock();
                                }
                                return;
                            }
                            AddSession(Session);
                        }
                        else
                        {
                            VideoClient.MediaDataReceived += new MTClientMediaDataReceivedHandler(MediaDataReceived);
                            VideoClient.Subscribe((uint)solt, DeviceID, ChannelNo, Session.Context.Type);
                            AddSession(Session);
                            Console.WriteLine(String.Format("通道{0}的类型{1}预览流已建立", Session.Context.ChannelNo, Session.Context.Type));
                            ServiceEnvironment.Instance.Logger.Info(String.Format("通道{0}的类型{1}预览流已建立", Session.Context.ChannelNo, Session.Context.Type));
                        }
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine(String.Format("VideoClient Subscribe Error.ChannelNo:{0}", Session.Context.ChannelNo));
                        ServiceEnvironment.Instance.Logger.Error(String.Format("VideoClient Subscribe Error.ChannelNO:{0}", Session.Context.ChannelNo), ex);
                    }
                    finally
                    {
                        Monitor.Exit(VideoClient_lock);
                    }
                }
                else// 等待超时
                {
                    Console.WriteLine("Subscribe时,未能获得VideoClient锁");
                    ServiceEnvironment.Instance.Logger.Warn("Subscribe时,未能获得VideoClient锁");
                }

               
                
                
            }
            //public void SendDate(MediaData mediaData)
            //{
                    
            //}
            void MediaDataReceived(MTClient sender, MediaData mediaData)
            {
                //int handle = (int)mediaData.DialogId;
                Byte[] framedate = new Byte[mediaData.FrameData.Count];
                Buffer.BlockCopy(mediaData.FrameData.Array, mediaData.FrameData.Offset, framedate, 0, mediaData.FrameData.Count);
                
                FramePayload framepayload = new FramePayload();
                if (mediaData.FrameType == FrameType.PFrame)
                    framepayload.FrameType = FramePayload.frametype.HW_FRAME_VIDEO_P;
                else if (mediaData.FrameType == FrameType.IFrame)
                    framepayload.FrameType = FramePayload.frametype.HW_FRAME_VIDEO_I;
                else if (mediaData.FrameType == FrameType.BFrame)
                    framepayload.FrameType = FramePayload.frametype.HW_FRAME_VIDEO_B;
                else if (mediaData.FrameType == FrameType.Audio)
                    framepayload.FrameType = FramePayload.frametype.HW_FRAME_AUDIO;
                else if (mediaData.FrameType == FrameType.MJpeg)
                    framepayload.FrameType = FramePayload.frametype.HW_FRAME_MOTION_FRAME;
                else
                {
                    Console.WriteLine("frametype error");
                    ServiceEnvironment.Instance.Logger.Error("frametype error");
                    return;
                }
                framepayload.FrameData = framedate;
                MTSession_lock.EnterReadLock();
                try
                {
                    foreach (StreamSession livesession in StreamSessions)
                    {
                        if (livesession.IsConnected())
                        {
                            bool sendout = livesession.TrySend(framepayload);
                            int count = 0;
                            while (sendout == false)
                            {
                                Thread.Sleep(10);
                                sendout = livesession.TrySend(framepayload);
                                if (livesession.IsConnected() == false)
                                    break;
                                count++;
                                if (count > 200)
                                {
                                    livesession.Close();
                                    Console.WriteLine("预览流数据发送超时，主动关闭session");
                                    ServiceEnvironment.Instance.Logger.Info("预览流数据发送超时，主动关闭session");
                                    return;
                                }
                            }
                        }
                        else
                            livesession.Close();
                    }
                }
                finally
                {
                    MTSession_lock.ExitReadLock();
                }           
            }
        }

        public DeviceConfig GetDeviceConfig(Howell5198Session session)
        {
            Console.WriteLine("客户端请求GetDeviceConfig");
            DeviceConfig response = new DeviceConfig(); 
            return response;
        }

        public GetMotionResponse GetMotionSet(Howell5198Session session, GetMotionRequest getMotionRequest)
        {
            throw new NotImplementedException();
        }

        public DavinciUsers GetUsers(Howell5198Session session)
        {
            throw new NotImplementedException();
        }

        public SetMotionResponse SetMotionSet(Howell5198Session session, SetMotionRequest setMotionRequest)
        {
            throw new NotImplementedException();
        }

        public SyncTimeResponse SyncTime(Howell5198Session session, SyncTimeRequest syncTimeRequest)
        {
            throw new NotImplementedException();
        }

        public UpdateUserResponse UpdateUser(Howell5198Session session, UpdateUserRequest updateUserRequest)
        {
            throw new NotImplementedException();
        }


        public CapturenResponse CaptureJpeg(Howell5198Session session, CaptureRequest captureRequest)
        {
            throw new NotImplementedException();
        }

        public NtpInfo GetNtpInfo(Howell5198Session session)
        {
            Console.WriteLine("客户端请求GetNtpInfo");
            NtpInfo response = new NtpInfo();
            try
            {
                NTPServer[] ntpservers = SystemClient.GetNTPServers();
                response.Cycletime = (uint)ntpservers[0].PollInterval;
                response.SvrIp = ntpservers[0].HostName;
                response.NtpServerId = ntpservers[0].Id;
            }
            catch (Exception ex)
            {
                Console.WriteLine(String.Format("GetNtpInfo Error. {0}", ex.Message));
                ServiceEnvironment.Instance.Logger.Error("GetDeviceConfig Error", ex);
                return null;                                                                                                                                                                                                                                                                                                                                                                                                                                                     
            }

            return response;
        }

        public SetNtpInfoResponse SetNtpInfo(Howell5198Session session, NtpInfo ntpInfo)
        {
            Console.WriteLine("客户端请求SetNtpInfo");
            return new SetNtpInfoResponse();
        }


        public tDeviceInfo GetDeviceInfo(Howell5198Session session)
        {
            Console.WriteLine("客户端请求GetDeviceInfo");
            tDeviceInfo response = new tDeviceInfo();
            try
            {
                Howell.Net.DeviceService.DeviceInfo devinfo = SystemClient.GetDeviceInfo();
                response.Id = devinfo.Id;
                response.Name = devinfo.Name;
                response.SerialNumber = devinfo.SerialNumber;
                response.Model = devinfo.Model;
                response.FirmwareVersion = devinfo.FirmwareVersion;
                response.FirmwareReleasedDate = devinfo.FirmwareReleasedDate;
                response.HardwareVersion = devinfo.HardwareVersion;
                if (devinfo.Description!=null)
                {
                    response.Description_enabled = 1;
                    response.Description = devinfo.Description;
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine(String.Format("GetDeviceInfo Error. {0}", ex.Message));
                ServiceEnvironment.Instance.Logger.Error("GetDeviceInfo Error", ex);
                return null;
            }
            return response;
        }

        public tDeviceStatus GetDeviceStatus(Howell5198Session session)
        {
            Console.WriteLine("客户端请求GetDeviceStatus");
            tDeviceStatus response = new tDeviceStatus();
            try
            {
                Howell.Net.DeviceService.DeviceStatus devstatus = SystemClient.GetDeviceStatus();
                response.CurrentTime = devstatus.CurrentTime;
                response.SystemUpTime = devstatus.SystemUpTime;
                if (devstatus.CPU != null)
                {
                    response.CPU_enabled = 1;
                    response.CPU.Name = devstatus.CPU[0].Name;
                    response.CPU.Utilization = devstatus.CPU[0].Utilization;
                }
                if (devstatus.Memory != null)
                {
                    response.Memory_enabled = 1;
                    response.Memory.Usage = devstatus.Memory[0].Usage;
                    response.Memory.TotalSize = devstatus.Memory[0].TotalSize;
                    response.Memory.Description = devstatus.Memory[0].Description;
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine(String.Format("GetDeviceStatus Error. {0}", ex.Message));
                ServiceEnvironment.Instance.Logger.Error("GetDeviceStatus Error", ex);
                return null;
            }
            return response;
        }

        public tNetworkInterface GetNetworkInterface(Howell5198Session session)
        {
            Console.WriteLine("客户端请求GetNetworkInterface");
            tNetworkInterface response = new tNetworkInterface();
            try
            {
                Howell.Net.DeviceService.Network.NetworkInterface[] networkInterfaces = NetworkClient.GetNetworkInterfaces();
                for (int i = 0; i < networkInterfaces.Length;++i )
                {
                    if(networkInterfaces[i].Internal==false)
                    {
                        response.Id = networkInterfaces[i].Id;
                        response.Name = networkInterfaces[i].Name;
                        response.Address = networkInterfaces[i].IPAddress.IPv4Address.Address;
                        response.SubnetMask = networkInterfaces[i].IPAddress.IPv4Address.SubnetMask;
                        response.SpeedDuplex = networkInterfaces[i].SpeedDuplex;
                        response.MTU = networkInterfaces[i].MTU;
                        response.PhysicalAddress = networkInterfaces[i].PhysicalAddress;
                        break;
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine(String.Format("GetNetworkInterface Error. {0}", ex.Message));
                ServiceEnvironment.Instance.Logger.Error("GetNetworkInterface Error", ex);
                return null;
            }
            return response;
        }

        public tServiceVersion GetServiceVersion(Howell5198Session session)
        {
            Console.WriteLine("客户端请求GetServiceVersion");
            tServiceVersion response = new tServiceVersion();
            try
            {
                Howell.Net.DeviceService.ServiceVersion version = SystemClient.GetVersion();
                response.Version = version.Version;
                response.BuildDate = version.BuildDate;
                response.Company = version.Company;
            }
            catch (Exception ex)
            {
                Console.WriteLine(String.Format("GetServiceVersion Error. {0}", ex.Message));
                ServiceEnvironment.Instance.Logger.Error("GetServiceVersion Error", ex);
                return null;
            }
            return response;
        }

        public tFault AddPanoCamera(Howell5198Session session, tPanoCamera panoCamera)
        {
            Console.WriteLine("客户端请求AddPanoCamera");
            return new tFault();
        }

        public tFault DeletePanoCamera(Howell5198Session session, tPanoCameraId panoCameraId)
        {
            Console.WriteLine("客户端请求DeletePanoCamera");
            return new tFault();
        }

        public tDecodingUnit GetDecodingUnit(Howell5198Session session, tDecodingUnitId decodingUnitId)
        {
           Console.WriteLine("客户端请求GetDecodingUnit");
           DecodingUnit decodingUnit = DecodingClient.GetDecodingUnit(decodingUnitId.DecodingUnitId);
           return ConvertClass.Convert(decodingUnit);
           //return new tDecodingUnit();
        }

        public tDecodingUnitList GetDecodingUnitList(Howell5198Session session)
        {
            Console.WriteLine("客户端请求GetDecodingUnitList");
            DecodingUnit[] decodingUnits = DecodingClient.GetDecodingUnits();
            tDecodingUnitList response = new tDecodingUnitList() { DecodingUnit_count = decodingUnits.Length };
            response.DecodingUnits = new tDecodingUnit[decodingUnits.Length];
            for (int i = 0; i < decodingUnits.Length; ++i)
            {
                response.DecodingUnits[i] = ConvertClass.Convert(decodingUnits[i]);
            }
            return response;
            //return new tDecodingUnitList();
        }

        public tPanoCamera GetPanoCamera(Howell5198Session session, tPanoCameraId panoCameraId)
        {
            Console.WriteLine("客户端请求GetPanoCamera");
            PanoCamera panoCamera = CamerasClient.GetPanoCamera(panoCameraId.PanoCameraId);
            return ConvertClass.Convert(panoCamera);
            //return new tPanoCamera() { Id="testid",Name="testname"};
        }

        public tPanoCameraList GetPanoCameraList(Howell5198Session session, tQueryString queryString)
        {
            Console.WriteLine("客户端请求GetPanoCameraList");
            int? pageindex = null;
            if (queryString.PageIndex_enabled == 1)
                pageindex = queryString.PageIndex;
            int? pagesize = null;
            if (queryString.PageSize_enabled == 1)
                pagesize = queryString.PageSize;
            PanoCameraList panoCameraList = CamerasClient.GetPanoCameras(pageindex, pagesize);
            return ConvertClass.Convert(panoCameraList);
            //return new tPanoCameraList();
        }

        public tPlayerStatus GetPlayerStatus(Howell5198Session session, tDecodingUnitId decodingUnitId)
        {
            Console.WriteLine("客户端请求GetPlayerStatus");
            var playerStatus = DecodingClient.GetStatus(decodingUnitId.DecodingUnitId);
            tPlayerStatus tplayerStatus = new tPlayerStatus() { Duration = playerStatus.Duration, Seekable = playerStatus.Seekable ? 1 : 0, State = (Howell5198.Protocols.PlayerState)playerStatus.State.Value };
            return tplayerStatus;
            //return new tPlayerStatus();
        }

        public tRotatingSpeed GetRotatingSpeed(Howell5198Session session, tDecodingUnitId decodingUnitId)
        {
            Console.WriteLine("客户端请求GetRotatingSpeed");
            int rotatingSpeed = DecodingClient.GetRotatingSpeed(decodingUnitId.DecodingUnitId);
            return new tRotatingSpeed() { RotatingSpeed = rotatingSpeed, DecodingUnitId = decodingUnitId.DecodingUnitId };
           // return new tRotatingSpeed();
        }

        public tViewPoint GetViewPoint(Howell5198Session session, tDecodingUnitId decodingUnitId)
        {
            Console.WriteLine("客户端请求GetViewPoint");
            ViewPoint viewPoint = DecodingClient.GetViewPoint(decodingUnitId.DecodingUnitId);
            return ConvertClass.Convert(viewPoint);
            //return new tViewPoint();
        }

        public tFault OneByOne(Howell5198Session session, OneByOneRequest oneByOneRequest)
        {
            Console.WriteLine("客户端请求OneByOne");
            return new tFault();
        }

        public tFault Pause(Howell5198Session session, PauseRequest pauseRequest)
        {
            Console.WriteLine("客户端请求Pause");
            return new tFault();
        }

        public tFault Resume(Howell5198Session session, ResumeRequest resumeRequest)
        {
            Console.WriteLine("客户端请求Resume");
            return new tFault();
        }

        public tFault Seek(Howell5198Session session, SeekRequest seekRequest)
        {
            Console.WriteLine("客户端请求Seek");
            return new tFault();
        }

        public tFault SetPanoCamera(Howell5198Session session, tPanoCamera panoCamera)
        {
            Console.WriteLine("客户端请求SetPanoCamera");
            return new tFault();
        }

        public tFault SetRotatingSpeed(Howell5198Session session, tRotatingSpeed rotatingSpeed)
        {
            Console.WriteLine("客户端请求SetRotatingSpeed");
            var fault = DecodingClient.SetRotatingSpeed(rotatingSpeed.DecodingUnitId, rotatingSpeed.RotatingSpeed);
            return new tFault() { FaultCode = fault.FaultCode, FaultReason = fault.FaultReason };
           // return new tFault();
        }

        public tFault SetViewPoint(Howell5198Session session, SetViewPointRequest setViewPointRequest)
        {
            Console.WriteLine("客户端请求SetViewPoint");
            var fault = DecodingClient.SetViewPoint(setViewPointRequest.DecodingUnitId, ConvertClass.Convert(setViewPointRequest.ViewPoint));
            return new tFault() { FaultCode = fault.FaultCode, FaultReason = fault.FaultReason };
            //return new tFault();
        }

        public tFault SetViewPointFixed(Howell5198Session session, SetViewPointFixedRequest setViewPointFixedRequest)
        {
            Console.WriteLine("客户端请求SetViewPointFixed");
            var fault = DecodingClient.SetViewPointFixed(setViewPointFixedRequest.DecodingUnitId, setViewPointFixedRequest.IsFixed == 0 ? false : true);
            return new tFault() { FaultCode = fault.FaultCode, FaultReason = fault.FaultReason };
           // return new tFault();
        }

        public tFault SetViewPointRows(Howell5198Session session, SetViewPointRowsRequest setViewPointRowsRequest)
        {
            Console.WriteLine("客户端请求SetViewPointRows");
            var fault = DecodingClient.SetViewPointRows(setViewPointRowsRequest.DecodingUnitId, setViewPointRowsRequest.Rows);
            return new tFault() { FaultCode = fault.FaultCode, FaultReason = fault.FaultReason };
            //return new tFault();
        }

        public tFault SwitchPanoCamera(Howell5198Session session, SwitchPanoCameraRequest switchPanoCameraRequest)
        {
            Console.WriteLine("客户端请求SwitchPanoCamera");
            var fault = DecodingClient.SetPanoCamera(switchPanoCameraRequest.DecodingUnitId, switchPanoCameraRequest.PanoCameraId);
            return new tFault() { FaultCode = fault.FaultCode, FaultReason = fault.FaultReason };
            //return new tFault();
        }


        public RegisterAlarmResponse SetRegisterAlarm(Howell5198Session session, RegisterAlarmRequest registerAlarmRequest)
        {
            Console.WriteLine("客户端请求SetRegisterAlarm");
            lock (m_AlarmSessions)
            {
                m_AlarmSessions.Add(session.Context.SessionID, session);
            }
            return new RegisterAlarmResponse();
        }


        public GetMotionExResponse GetMotionExSet(Howell5198Session session, GetMotionExRequest getMotionRequest)
        {
            Console.WriteLine("客户端请求GetMotionExSet");
            return new GetMotionExResponse() { Slot = getMotionRequest.ChannelNo };

        }

        public GetSubChannelSetResponse GetSubChannelSet(Howell5198Session session, GetSubChannelSetRequest getMotionRequest)
        {
            Console.WriteLine("客户端请求GetSubChannelSet");
            return new GetSubChannelSetResponse() { Slot = getMotionRequest.ChannelNo,Used=1 ,EncodeType=1};
        }

        public SetMotionExResponse SetMotionExSet(Howell5198Session session, SetMotionExRequest getMotionRequest)
        {
            Console.WriteLine("客户端请求SetMotionExSet");
            return new SetMotionExResponse();
        }

        public SetSubChannelSetResponse SetSubChannelSet(Howell5198Session session, SetSubChannelSetRequest getMotionRequest)
        {
            Console.WriteLine("客户端请求SetSubChannelSet");
            return new SetSubChannelSetResponse();
        }


        public GetNetSyncTimeResponse GetNetSyncTime(Howell5198Session session)
        {
            Console.WriteLine("客户端请求GetNetSyncTime");
            return new GetNetSyncTimeResponse();
        }

        public SetNetSyncTimeResponse SetNetSyncTime(Howell5198Session session, NetSyncTime netSyncTime)
        {
            Console.WriteLine("客户端请求SetNetSyncTime;Enable_force:{0},Force_interval:{1}", netSyncTime.Enable_force, netSyncTime.Force_interval);
            return new SetNetSyncTimeResponse();
        }


        public ForceIFrameResponse ForceIFrame(Howell5198Session Session, ForceIFrameRequest forceIFrameRequest)
        {
            Console.WriteLine("客户端请求ForceIFrame");
            return new ForceIFrameResponse();
        }
    }

    class ConvertClass
    {
        public static tDecodingUnit Convert(DecodingUnit decodingUnit)
        {
            tDecodingUnit tdecodingUnit = new tDecodingUnit() { Id = decodingUnit.Id };
            if (decodingUnit.Name != null)
            {
                tdecodingUnit.Name_enabled = 1;
                tdecodingUnit.Name = decodingUnit.Name;
            }
            if (decodingUnit.PanoCameraId != null)
            {
                tdecodingUnit.PanoCameraId_enabled = 1;
                tdecodingUnit.PanoCameraId = decodingUnit.PanoCameraId;
            }
            if (decodingUnit.Position != null)
            {
                tdecodingUnit.Position_enabled = 1;
                tdecodingUnit.Position = new tPosition() { X = decodingUnit.Position.X, Y = decodingUnit.Position.Y };
            }
            if (decodingUnit.Resolution != null)
            {
                tdecodingUnit.Resolution_enabled = 1;
                tdecodingUnit.Resolution = new tResolution() { Height = decodingUnit.Resolution.Height, Width = decodingUnit.Resolution.Width };
            }
            if (decodingUnit.DisplayDeviceId != null)
            {
                tdecodingUnit.DisplayDeviceId_enabled = 1;
                tdecodingUnit.DisplayDeviceId = decodingUnit.DisplayDeviceId;
            }
            return tdecodingUnit;
        }

        public static tPanoCamera Convert(PanoCamera panoCamera)
        {
            tPanoCamera tpanoCamera = new tPanoCamera() { GroupId = panoCamera.GroupId,Name=panoCamera.Name,
                Model=panoCamera.Model,MainCameraBuildInId=panoCamera.MainCameraBuildInId,WiperCameraBuildInId=panoCamera.WiperCameraBuildInId,
                BuildInCamera_count=panoCamera.BuildInCamera.Length };
           if(panoCamera.BuildInCamera.Length>0)
           {
               tpanoCamera.BuildInCameras=new tBuildInCamera[panoCamera.BuildInCamera.Length];
               for(int i=0;i<panoCamera.BuildInCamera.Length;++i)
               {
                   tpanoCamera.BuildInCameras[i]=ConvertClass.Convert(panoCamera.BuildInCamera[i]);
               }
           }
            if (panoCamera.Id != null)
            {
                tpanoCamera.Id_enabled = 1;
                tpanoCamera.Id = panoCamera.Id;
                tpanoCamera.IsAllOnline = (bool)panoCamera.IsAllOnline ? 1 : 0;
                tpanoCamera.IsCompleted = (bool)panoCamera.IsCompleted ? 1 : 0;
            }
            if (panoCamera.DefaultViewPoint != null)
            {
                tpanoCamera.DefaultViewPoint_enabled = 1;
                tpanoCamera.DefaultViewPoint = ConvertClass.Convert(panoCamera.DefaultViewPoint);
            }
            if (panoCamera.ExistedInDatabase != null)
            {
                tpanoCamera.ExistedInDatabase_enabled = 1;
                tpanoCamera.ExistedInDatabase = (bool)panoCamera.ExistedInDatabase ? 1 : 0;
            }
            return tpanoCamera;
        }
        public static tBuildInCamera Convert(BuildInCamera buildInCamera)
        {
            return new tBuildInCamera();
        }
        public static tViewPoint Convert(ViewPoint viewPoint)
        {
            tViewPoint tviewPoint = new tViewPoint() { Angle = viewPoint.Angle, Distance = viewPoint.Distance, Height = viewPoint.Height};
            if (viewPoint.Rows != null)
            {
                tviewPoint.Rows_enabled = 1;
                tviewPoint.Rows = (int)viewPoint.Rows;
            }
            if (viewPoint.Fixed != null)
            {
                tviewPoint.Fixed_enabled=1;
                tviewPoint.Fixed = (bool)viewPoint.Fixed?1:0;
            }
            return tviewPoint;
        }
        public static ViewPoint Convert(tViewPoint tviewPoint)
        {
            ViewPoint viewPoint = new ViewPoint() { Angle = tviewPoint.Angle, Distance = tviewPoint.Distance, Height = tviewPoint.Height };
            if (tviewPoint.Rows_enabled == 1)
            {
                viewPoint.Rows = tviewPoint.Rows;
            }
            if (tviewPoint.Fixed_enabled == 1)
            {
                viewPoint.Fixed = tviewPoint.Fixed == 0 ? false : true;
            }
            return viewPoint;
        }
        public static tPanoCameraList Convert(PanoCameraList panoCameraList)
        {
            tPanoCameraList tpanoCameraList = new tPanoCameraList() { PanoCamera_count = panoCameraList .PanoCamera.Length};
            if (panoCameraList.Page != null)
            {
                tpanoCameraList.Page_enabled = 1;
                tpanoCameraList.Page = new tPage() { PageCount = panoCameraList.Page.PageCount,
                                                     PageIndex = panoCameraList.Page.PageIndex,
                                                     PageSize = panoCameraList.Page.PageSize,
                                                     RecordCount = panoCameraList.Page.RecordCount,
                                                     TotalRecordCount = panoCameraList.Page.TotalRecordCount
                };
            }
            if(panoCameraList.PanoCamera.Length>0)
            {
                tpanoCameraList.PanoCameras = new tPanoCamera[panoCameraList.PanoCamera.Length];
                for (int i = 0; i < panoCameraList.PanoCamera.Length;++i )
                {
                    tpanoCameraList.PanoCameras[i] = ConvertClass.Convert(panoCameraList.PanoCamera[i]);
                }
            }
        return tpanoCameraList;
        }
    }
}
